// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package mock

import (
	mock "github.com/stretchr/testify/mock"
)

// NewMatcher creates a new instance of Matcher. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMatcher(t interface {
	mock.TestingT
	Cleanup(func())
}) *Matcher {
	mock := &Matcher{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// Matcher is an autogenerated mock type for the Matcher type
type Matcher struct {
	mock.Mock
}

type Matcher_Expecter struct {
	mock *mock.Mock
}

func (_m *Matcher) EXPECT() *Matcher_Expecter {
	return &Matcher_Expecter{mock: &_m.Mock}
}

// Expected provides a mock function for the type Matcher
func (_mock *Matcher) Expected() string {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for Expected")
	}

	var r0 string
	if returnFunc, ok := ret.Get(0).(func() string); ok {
		r0 = returnFunc()
	} else {
		r0 = ret.Get(0).(string)
	}
	return r0
}

// Matcher_Expected_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Expected'
type Matcher_Expected_Call struct {
	*mock.Call
}

// Expected is a helper method to define mock.On call
func (_e *Matcher_Expecter) Expected() *Matcher_Expected_Call {
	return &Matcher_Expected_Call{Call: _e.mock.On("Expected")}
}

func (_c *Matcher_Expected_Call) Run(run func()) *Matcher_Expected_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *Matcher_Expected_Call) Return(s string) *Matcher_Expected_Call {
	_c.Call.Return(s)
	return _c
}

func (_c *Matcher_Expected_Call) RunAndReturn(run func() string) *Matcher_Expected_Call {
	_c.Call.Return(run)
	return _c
}

// Match provides a mock function for the type Matcher
func (_mock *Matcher) Match(actual any) (bool, error) {
	ret := _mock.Called(actual)

	if len(ret) == 0 {
		panic("no return value specified for Match")
	}

	var r0 bool
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(any) (bool, error)); ok {
		return returnFunc(actual)
	}
	if returnFunc, ok := ret.Get(0).(func(any) bool); ok {
		r0 = returnFunc(actual)
	} else {
		r0 = ret.Get(0).(bool)
	}
	if returnFunc, ok := ret.Get(1).(func(any) error); ok {
		r1 = returnFunc(actual)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// Matcher_Match_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Match'
type Matcher_Match_Call struct {
	*mock.Call
}

// Match is a helper method to define mock.On call
//   - actual
func (_e *Matcher_Expecter) Match(actual interface{}) *Matcher_Match_Call {
	return &Matcher_Match_Call{Call: _e.mock.On("Match", actual)}
}

func (_c *Matcher_Match_Call) Run(run func(actual any)) *Matcher_Match_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(any))
	})
	return _c
}

func (_c *Matcher_Match_Call) Return(b bool, err error) *Matcher_Match_Call {
	_c.Call.Return(b, err)
	return _c
}

func (_c *Matcher_Match_Call) RunAndReturn(run func(actual any) (bool, error)) *Matcher_Match_Call {
	_c.Call.Return(run)
	return _c
}
